scale_color_manual(values = c("red3","royalblue3","grey"), guide = FALSE) +
theme_bw() +
annotate("text", x = Inf, y = Inf, label = paste0("UP: ", up),
hjust = 1.1, vjust = 2, size = 5, color = "red") +
annotate("text", x = -Inf, y = Inf, label = paste0("DN: ", dn),
hjust = -0.1, vjust = 2, size = 5, color = "royalblue") +
theme_bw() + ggtitle(t)
deg %>% DT::datatable()
deg = deg.two.groups(obj.srt = obj.tmp,
treatment = "P30342_A",
control = "P30342_I")
deg6 =deg
t= paste0(paste0("P30342_", "A"), "/",paste0("P30342_", "I"))
deg %>% ggplot(aes(avg_log2FC, -log10(p_val))) +
geom_point(size=0.1) +
geom_vline(xintercept = 0, size=0.1) +
theme_bw() + ggtitle(t)
deg = deg %>% mutate(DE= ifelse(p_val <= 0.05 & avg_log2FC >= log2(1.2), "UP",
ifelse(p_val <= 0.05 & avg_log2FC <= -log2(1.2), "DN",
"no significant")))
deg$DE = factor(deg$DE, levels = c("UP","DN","no significant"))
up = nrow(deg[deg$DE == "UP", ])
dn = nrow(deg[deg$DE == "DN", ])
deg %>% ggplot(aes(avg_log2FC, -log10(p_val), color=DE)) +
geom_point(size=0.5, shape=19, alpha=0.7) +
geom_vline(xintercept = c(-log2(1.2), log2(1.2)), size=0.1, color="grey88") +
geom_hline(yintercept = -log10(0.05), size=0.1) +
scale_color_manual(values = c("red3","royalblue3","grey"), guide = FALSE) +
theme_bw() +
annotate("text", x = Inf, y = Inf, label = paste0("UP: ", up),
hjust = 1.1, vjust = 2, size = 5, color = "red") +
annotate("text", x = -Inf, y = Inf, label = paste0("DN: ", dn),
hjust = -0.1, vjust = 2, size = 5, color = "royalblue") +
theme_bw() + ggtitle(t)
degs = list(deg1,deg2,deg3,deg4,deg5,deg6)
degs
names(degs)
degs = list(deg1,deg2,deg3,deg4,deg5,deg6)
names(degs) = paste0("DC-DEG", 1:6)
degs
degs = list(deg1,deg2,deg3,deg4,deg5,deg6)
names(degs) = paste0("DC_DEG", 1:6)
dir
degs = list(deg1,deg2,deg3,deg4,deg5,deg6)
names(degs) = paste0("DC_DEG", 1:6)
saveRDS(degs, paste0(dir,"rds/Daiichi_2024_P30342_DCsubset_DEGs.240523.rds"))
deg = deg.two.groups(obj.srt = obj.tmp,
treatment = "P30342_D",
control = "P30342_M")
deg1 =deg
t= paste0(paste0("P30342_", "D"), "/",paste0("P30342_", "M"))
deg %>% ggplot(aes(avg_log2FC, -log10(p_val))) +
geom_point(size=0.1) +
geom_vline(xintercept = 0, size=0.1) +
theme_bw() + ggtitle(t)
deg[1:3,]
hallmark <- msigdbr::msigdbr(species = "Homo sapiens", category = "H") %>%
dplyr::select(gs_name, gene_symbol)
library(clusterProfiler)
perform_GSEA <- function(res, ref, pvalueCutoff = 1) {
ranking <- function(res) {
# Check the name of log2fc related
if ("avg_log2FC" %in% names(res)) {
df <- res$avg_log2FC
} else if ("log2FoldChange" %in% names(res)) {
df <- res$log2FoldChange
} else {
stop("Neither avg_log2FC nor log2FoldChange columns found in the data frame.")
}
names(df) <- rownames(res)
df <- sort(df, decreasing = TRUE)
return(df)
}
ranked.res <- ranking(res)
x <- clusterProfiler::GSEA(geneList = ranked.res,
TERM2GENE = ref,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = "BH",
verbose = TRUE,
seed = TRUE)
result <- x@result %>% arrange(desc(NES))
result <- result[, c('NES', 'pvalue', 'p.adjust', 'core_enrichment', 'ID')]
return(result)
}
gsea.res = perform_GSEA(res = deg, ref = hallmark, pvalueCutoff = 1)
gsea.res
# GSEA Plot
gsea_nes_plot <- function(gsea.res, title, color="pvalue") {
gsea.res = gsea.res %>% mutate(sig=ifelse(pvalue <= 0.1, "p value <= 0.1", "p value > 0.1"))
# basic plot
p <- gsea.res %>%
ggplot(aes(reorder(ID, NES), NES)) +
geom_col(aes(fill=!!sym(color)), color="grey5", size=0.1) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score", title="GSEA") +
theme_classic() +
theme(axis.text.x = element_text(size=5, face = 'bold'),
axis.text.y = element_text(size=6, face = 'bold'),
axis.title = element_text(size=10)) +
ggtitle(title)
# color by color input type
if (color == "pvalue") {
p <- p + scale_fill_gradient(low = 'orangered', high = '#E5E7E9')
} else if (color == "sig") {
p <- p + scale_fill_manual(values = c("orangered", "#E5E7E9"))
}
return(p)
}
gsea_nes_plot(gsea.res = gsea.res, title = "Test1", color = "pvalue")
gsea_nes_plot(gsea.res = gsea.res, title = "Test2", color = "sig")
gsea_nes_plot <- function(gsea.res, title, color="pvalue") {
gsea.res = gsea.res %>% mutate(sig=ifelse(pvalue <= 0.05, "p value <= 0.05", "p value > 0.05"))
# basic plot
p <- gsea.res %>%
ggplot(aes(reorder(ID, NES), NES)) +
geom_col(aes(fill=!!sym(color)), color="grey5", size=0.1) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score", title="GSEA") +
theme_classic() +
theme(axis.text.x = element_text(size=5, face = 'bold'),
axis.text.y = element_text(size=6, face = 'bold'),
axis.title = element_text(size=10)) +
ggtitle(title)
# color by color input type
if (color == "pvalue") {
p <- p + scale_fill_gradient(low = 'orangered', high = '#E5E7E9')
} else if (color == "sig") {
p <- p + scale_fill_manual(values = c("orangered", "#E5E7E9"))
}
return(p)
}
deg[1:3,]
gsea.res = perform_GSEA(res = deg, ref = hallmark, pvalueCutoff = 1)
gsea_nes_plot(gsea.res = gsea.res, title = "Test1", color = "pvalue")
gsea_nes_plot(gsea.res = gsea.res, title = "Test2", color = "sig")
gsea.res = perform_GSEA(res = deg, ref = hallmark, pvalueCutoff = 1)
gsea_nes_plot(gsea.res = gsea.res, title = t, color = "pvalue")
# GSEA related functions
library(clusterProfiler)
perform_GSEA <- function(res, ref, pvalueCutoff = 1) {
ranking <- function(res) {
# Check the name of log2fc related
if ("avg_log2FC" %in% names(res)) {
df <- res$avg_log2FC
} else if ("log2FoldChange" %in% names(res)) {
df <- res$log2FoldChange
} else {
stop("Neither avg_log2FC nor log2FoldChange columns found in the data frame.")
}
names(df) <- rownames(res)
df <- sort(df, decreasing = TRUE)
return(df)
}
ranked.res <- ranking(res)
x <- clusterProfiler::GSEA(geneList = ranked.res,
TERM2GENE = ref,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = "BH",
verbose = TRUE,
seed = TRUE)
result <- x@result %>% arrange(desc(NES))
result <- result[, c('NES', 'pvalue', 'p.adjust', 'core_enrichment', 'ID')]
return(result)
}
# GSEA Plot
gsea_nes_plot <- function(gsea.res, title, color="pvalue") {
gsea.res = gsea.res %>% mutate(sig=ifelse(pvalue <= 0.05, "p value <= 0.05", "p value > 0.05"))
# basic plot
p <- gsea.res %>%
ggplot(aes(reorder(ID, NES), NES)) +
geom_col(aes(fill=!!sym(color)), color="grey5", size=0.2) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score", title="GSEA") +
theme_classic() +
theme(axis.text.x = element_text(size=5, face = 'bold'),
axis.text.y = element_text(size=6, face = 'bold'),
axis.title = element_text(size=10)) +
ggtitle(title)
# color by color input type
if (color == "pvalue") {
p <- p + scale_fill_gradient(low = 'orangered', high = '#E5E7E9')
} else if (color == "sig") {
p <- p + scale_fill_manual(values = c("orangered", "#E5E7E9"))
}
return(p)
}
gsea_nes_plot(gsea.res = gsea.res, title = t, color = "pvalue")
# GSEA related functions
library(clusterProfiler)
perform_GSEA <- function(res, ref, pvalueCutoff = 1) {
ranking <- function(res) {
# Check the name of log2fc related
if ("avg_log2FC" %in% names(res)) {
df <- res$avg_log2FC
} else if ("log2FoldChange" %in% names(res)) {
df <- res$log2FoldChange
} else {
stop("Neither avg_log2FC nor log2FoldChange columns found in the data frame.")
}
names(df) <- rownames(res)
df <- sort(df, decreasing = TRUE)
return(df)
}
ranked.res <- ranking(res)
x <- clusterProfiler::GSEA(geneList = ranked.res,
TERM2GENE = ref,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = "BH",
verbose = TRUE,
seed = TRUE)
result <- x@result %>% arrange(desc(NES))
result <- result[, c('NES', 'pvalue', 'p.adjust', 'core_enrichment', 'ID')]
return(result)
}
# GSEA Plot
gsea_nes_plot <- function(gsea.res, title, color="pvalue") {
gsea.res = gsea.res %>% mutate(sig=ifelse(pvalue <= 0.05, "p value <= 0.05", "p value > 0.05"))
# basic plot
p <- gsea.res %>%
ggplot(aes(reorder(ID, NES), NES)) +
geom_col(aes(fill=!!sym(color)), color="grey5", size=0.2, alpha=0.8) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score", title="GSEA") +
theme_classic() +
theme(axis.text.x = element_text(size=5, face = 'bold'),
axis.text.y = element_text(size=6, face = 'bold'),
axis.title = element_text(size=10)) +
ggtitle(title)
# color by color input type
if (color == "pvalue") {
p <- p + scale_fill_gradient(low = 'orangered', high = '#E5E7E9')
} else if (color == "sig") {
p <- p + scale_fill_manual(values = c("orangered", "#E5E7E9"))
}
return(p)
}
gsea_nes_plot(gsea.res = gsea.res, title = t, color = "pvalue")
# GSEA related functions
library(clusterProfiler)
perform_GSEA <- function(res, ref, pvalueCutoff = 1) {
ranking <- function(res) {
# Check the name of log2fc related
if ("avg_log2FC" %in% names(res)) {
df <- res$avg_log2FC
} else if ("log2FoldChange" %in% names(res)) {
df <- res$log2FoldChange
} else {
stop("Neither avg_log2FC nor log2FoldChange columns found in the data frame.")
}
names(df) <- rownames(res)
df <- sort(df, decreasing = TRUE)
return(df)
}
ranked.res <- ranking(res)
x <- clusterProfiler::GSEA(geneList = ranked.res,
TERM2GENE = ref,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = "BH",
verbose = TRUE,
seed = TRUE)
result <- x@result %>% arrange(desc(NES))
result <- result[, c('NES', 'pvalue', 'p.adjust', 'core_enrichment', 'ID')]
return(result)
}
# GSEA Plot
gsea_nes_plot <- function(gsea.res, title, color="pvalue") {
gsea.res = gsea.res %>% mutate(sig=ifelse(pvalue <= 0.05, "p value <= 0.05", "p value > 0.05"))
# basic plot
p <- gsea.res %>%
ggplot(aes(reorder(ID, NES), NES)) +
geom_col(aes(fill=!!sym(color)), color="grey5", size=0.15, alpha=0.8) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score", title="GSEA") +
theme_classic() +
theme(axis.text.x = element_text(size=5, face = 'bold'),
axis.text.y = element_text(size=6, face = 'bold'),
axis.title = element_text(size=10)) +
ggtitle(title)
# color by color input type
if (color == "pvalue") {
p <- p + scale_fill_gradient(low = 'orangered', high = '#E5E7E9')
} else if (color == "sig") {
p <- p + scale_fill_manual(values = c("orangered", "#E5E7E9"))
}
return(p)
}
gsea_nes_plot(gsea.res = gsea.res, title = t, color = "pvalue")
gsea_nes_plot(gsea.res = gsea.res, title = t, color = "sig")
deg = deg.two.groups(obj.srt = obj.tmp,
treatment = "P30342_D",
control = "P30342_M")
deg1 =deg
t= paste0(paste0("P30342_", "D"), "/",paste0("P30342_", "M"))
gsea.res = perform_GSEA(res = deg, ref = hallmark, pvalueCutoff = 1)
gsea.res[1:3,]
deg = deg.two.groups(obj.srt = obj.tmp,
treatment = "P30342_A",
control = "P30342_I")
deg6 =deg
t= paste0(paste0("P30342_", "A"), "/",paste0("P30342_", "I"))
gsea.res = perform_GSEA(res = deg, ref = hallmark, pvalueCutoff = 1)
gsea_nes_plot <- function(gsea.res, title, color="pvalue") {
gsea.res = gsea.res %>% mutate(sig=ifelse(pvalue <= 0.05, "p value <= 0.05", "p value > 0.05"))
# 기본 플롯
p <- gsea.res %>%
ggplot(aes(reorder(ID, NES), NES)) +
geom_col(aes(fill=!!sym(color)), color="grey5", size=0.15, alpha=0.8) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score", title="GSEA") +
theme_classic() +
theme(axis.text.x = element_text(size=5, face = 'bold'),
axis.text.y = element_text(size=6, face = 'bold'),
axis.title = element_text(size=10)) +
ggtitle(title)
# color에 따른 색상 설정
if (color == "pvalue") {
p <- p + scale_fill_gradient(low = 'orangered', high = '#E5E7E9')
} else if (color == "sig") {
# sig 값이 "p value <= 0.05"가 없으면 기본 색상을 "#E5E7E9"로 설정
if (!any(gsea.res$sig == "p value <= 0.05")) {
p <- p + scale_fill_manual(values = c("#E5E7E9"))
} else {
p <- p + scale_fill_manual(values = c("orangered", "#E5E7E9"))
}
}
return(p)
}
gsea_nes_plot(gsea.res = gsea.res, title = t, color = "sig")
knitr::opts_chunk$set(echo=F, fig.align = "left",
message=F, warning=F,
results = "markup",
error = TRUE,
highlight = TRUE,
prompt = FALSE,
tidy = FALSE)
dir= "~/Desktop/DF/DFCI_Paweletz/2024_Daiichi_DXD/"
obj.srt = readRDS(paste0(dir,"rds/P30342.24.05.07.rds"))
# Subset
obj.tmp = subset(obj.srt, RNA_snn_res.0.2 == 7)
df = obj.tmp@meta.data
obj.tmp@meta.data$orig.ident %>% unique()
# Subset
obj.tmp = subset(obj.srt, RNA_snn_res.0.2 == 7)
obj.tmp = subset(obj.srt, orig.ident %in% c("P30342_M","P30342_D"))
df = obj.tmp@meta.data
df = df %>% mutate(sample = case_when(orig.ident == "P30342_M" ~"CTL",
orig.ident == "P30342_D" ~"TRT"))
df
res = "sample"
obj.tmp@meta.data %>% ggplot(aes(!!sym(res), fill=!!sym(res))) +
geom_bar(alpha=0.7, color="grey5", size=0.1) +
geom_text(stat="count", aes(label= ..count..), vjust=-0.5, size=3) +
orig.ident_fils +
xlab("") +
theme_classic() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust=1))
# modify the sample name
df = obj.tmp@meta.data
df = df %>% mutate(sample = case_when(orig.ident == "P30342_M" ~"CTL",
orig.ident == "P30342_D" ~"TRT"))
obj.tmp@meta.data= df
res = "sample"
obj.tmp@meta.data %>% ggplot(aes(!!sym(res), fill=!!sym(res))) +
geom_bar(alpha=0.7, color="grey5", size=0.1) +
geom_text(stat="count", aes(label= ..count..), vjust=-0.5, size=3) +
orig.ident_fils +
xlab("") +
theme_classic() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust=1))
res = "sample"
obj.tmp@meta.data %>% ggplot(aes(!!sym(res), fill=!!sym(res))) +
geom_bar(alpha=0.7, color="grey5", size=0.1) +
geom_text(stat="count", aes(label= ..count..), vjust=-0.5, size=3) +
orig.ident_fils +
xlab("") +
theme_classic() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust=1))
res = "sample"
obj.tmp@meta.data %>% ggplot(aes(!!sym(res), fill=!!sym(res))) +
geom_bar(alpha=0.7, color="grey5", size=0.1) +
geom_text(stat="count", aes(label= ..count..), vjust=-0.5, size=3) +
orig.ident_fils +
xlab("") +
theme_classic() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust=1))
# Define funtion
#id1 = "treatment"
#id2 = "control"
#logfc = 0
deg.two.groups = function(obj.srt = obj.srt, treatment, control,logfc=0){
Idents(obj.srt) = 'orig.ident'
markers <-FindMarkers(
obj.srt,
logfc.threshold = logfc,
ident.1 = treatment,
ident.2 = control, slot= "data")
}
deg = deg.two.groups(obj.srt = obj.tmp,
treatment = "TRT",
control = "CTL")
t= paste0(paste0("TRT"), " / ",paste0("CTL"))
# Define funtion
#id1 = "treatment"
#id2 = "control"
#logfc = 0
deg.two.groups = function(obj.srt = obj.srt, treatment, control,logfc=0){
Idents(obj.srt) = 'orig.ident'
markers <-FindMarkers(
obj.srt,
logfc.threshold = logfc,
ident.1 = treatment,
ident.2 = control, slot= "data")
}
# Define funtion
#id1 = "treatment"
#id2 = "control"
#logfc = 0
deg.two.groups = function(obj.srt = obj.srt, treatment, control,logfc=0){
Idents(obj.srt) = 'sample'
markers <-FindMarkers(
obj.srt,
logfc.threshold = logfc,
ident.1 = treatment,
ident.2 = control, slot= "data")
}
deg = deg.two.groups(obj.srt = obj.tmp,
treatment = "TRT",
control = "CTL")
t= paste0(paste0("TRT"), " / ",paste0("CTL"))
deg %>% ggplot(aes(avg_log2FC, -log10(p_val))) +
geom_point(size=0.1) +
geom_vline(xintercept = 0, size=0.1) +
theme_bw() + ggtitle(t)
deg = deg %>% mutate(DE= ifelse(p_val <= 0.05 & avg_log2FC >= log2(1.2), "UP",
ifelse(p_val <= 0.05 & avg_log2FC <= -log2(1.2), "DN",
"no significant")))
deg$DE = factor(deg$DE, levels = c("UP","DN","no significant"))
up = nrow(deg[deg$DE == "UP", ])
dn = nrow(deg[deg$DE == "DN", ])
deg %>% ggplot(aes(avg_log2FC, -log10(p_val), color=DE)) +
geom_point(size=0.5, shape=19, alpha=0.7) +
geom_vline(xintercept = c(-log2(1.2), log2(1.2)), size=0.1, color="grey88") +
geom_hline(yintercept = -log10(0.05), size=0.1) +
scale_color_manual(values = c("red3","royalblue3","grey"), guide = FALSE) +
theme_bw() +
annotate("text", x = Inf, y = Inf, label = paste0("UP: ", up),
hjust = 1.1, vjust = 2, size = 5, color = "red") +
annotate("text", x = -Inf, y = Inf, label = paste0("DN: ", dn),
hjust = -0.1, vjust = 2, size = 5, color = "royalblue") +
theme_bw() + ggtitle(t)
deg %>% DT::datatable()
# GSEA related functions
library(clusterProfiler)
perform_GSEA <- function(res, ref, pvalueCutoff = 1) {
ranking <- function(res) {
# Check the name of log2fc related
if ("avg_log2FC" %in% names(res)) {
df <- res$avg_log2FC
} else if ("log2FoldChange" %in% names(res)) {
df <- res$log2FoldChange
} else {
stop("Neither avg_log2FC nor log2FoldChange columns found in the data frame.")
}
names(df) <- rownames(res)
df <- sort(df, decreasing = TRUE)
return(df)
}
ranked.res <- ranking(res)
x <- clusterProfiler::GSEA(geneList = ranked.res,
TERM2GENE = ref,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = "BH",
verbose = TRUE,
seed = TRUE)
result <- x@result %>% arrange(desc(NES))
result <- result[, c('NES', 'pvalue', 'p.adjust', 'core_enrichment', 'ID')]
return(result)
}
# GSEA Plot
gsea_nes_plot <- function(gsea.res, title, color="pvalue") {
gsea.res = gsea.res %>% mutate(sig=ifelse(pvalue <= 0.05, "p value <= 0.05", "p value > 0.05"))
# basic plot
p <- gsea.res %>%
ggplot(aes(reorder(ID, NES), NES)) +
geom_col(aes(fill=!!sym(color)), color="grey5", size=0.15, alpha=0.8) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score", title="GSEA") +
theme_classic() +
theme(axis.text.x = element_text(size=5, face = 'bold'),
axis.text.y = element_text(size=6, face = 'bold'),
axis.title = element_text(size=10)) +
ggtitle(title)
# color by color input type
if (color == "pvalue") {
p <- p + scale_fill_gradient(low = 'orangered', high = '#E5E7E9')
} else if (color == "sig") {
p <- p + scale_fill_manual(values = c("orangered", "#E5E7E9"))
}
return(p)
}
# Pathway selection : HALLMARK
hallmark <- msigdbr::msigdbr(species = "Homo sapiens", category = "H") %>%
dplyr::select(gs_name, gene_symbol)
gsea.res = perform_GSEA(res = deg, ref = hallmark, pvalueCutoff = 1)
gsea_nes_plot(gsea.res = gsea.res, title = t, color = "pvalue")
gsea_nes_plot(gsea.res = gsea.res, title = t, color = "sig")
gsea.res %>% DT::datatable()
library(SC3)
